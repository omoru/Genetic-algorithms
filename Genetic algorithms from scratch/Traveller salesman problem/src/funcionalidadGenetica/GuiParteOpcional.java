package funcionalidadGenetica;

import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JFrame;
import org.math.plot.Plot2DPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Bryan De Renovales
 */
public class GuiParteOpcional extends javax.swing.JFrame {

    /**
     * Creates new form GuiParteOpcional
     */
    public GuiParteOpcional() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PoblacionSizeLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        GenerationNumberLabel = new javax.swing.JLabel();
        CrossoverLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        minPopulationSizeText = new javax.swing.JTextField();
        maxPopulationSizeText = new javax.swing.JTextField();
        aumentoPopulationText = new javax.swing.JTextField();
        minGenerationNumberText = new javax.swing.JTextField();
        maxGenerationNumberText = new javax.swing.JTextField();
        aumentoGenerationNumberText = new javax.swing.JTextField();
        minCrossoverText = new javax.swing.JTextField();
        minMutationText = new javax.swing.JTextField();
        minElitismoText = new javax.swing.JTextField();
        maxCrossoverText = new javax.swing.JTextField();
        maxMutationText = new javax.swing.JTextField();
        maxElitismoText = new javax.swing.JTextField();
        aumentoCrossoverText = new javax.swing.JTextField();
        aumentoMutationText = new javax.swing.JTextField();
        aumentoElitismoText = new javax.swing.JTextField();
        runButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        SeleccionadoCombo = new javax.swing.JComboBox<>();
        VariableAEstudiar = new javax.swing.JLabel();
        ResultadoCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        resultadoText = new javax.swing.JTextField();
        mediaText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        resultadoIntText = new javax.swing.JTextField();
        mediaIntText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PoblacionSizeLabel.setText("Population Size");

        jLabel1.setText("Minimo");

        jLabel2.setText("Maximo");

        GenerationNumberLabel.setText("Generation Number");

        CrossoverLabel.setText("Crossover");

        jLabel3.setText("Escala");

        jLabel4.setText("Mutation");

        jLabel5.setText("Elitismo");

        minPopulationSizeText.setText("60");
        minPopulationSizeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minPopulationSizeTextActionPerformed(evt);
            }
        });

        maxPopulationSizeText.setText("100");
        maxPopulationSizeText.setToolTipText("");

        aumentoPopulationText.setText("1");

        minGenerationNumberText.setText("60");

        maxGenerationNumberText.setText("100");

        aumentoGenerationNumberText.setText("1");

        minCrossoverText.setText("0.01");

        minMutationText.setText("0.01");

        minElitismoText.setText("0.01");

        maxCrossoverText.setText("0.60");
        maxCrossoverText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxCrossoverTextActionPerformed(evt);
            }
        });

        maxMutationText.setText("0.60");

        maxElitismoText.setText("0.60");

        aumentoCrossoverText.setText("0.01");
        aumentoCrossoverText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentoCrossoverTextActionPerformed(evt);
            }
        });

        aumentoMutationText.setText("0.01");

        aumentoElitismoText.setText("0.01");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");

        SeleccionadoCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Population Size", "Generation Number", "Crossover", "Mutation", "Elitismo" }));
        SeleccionadoCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionadoComboActionPerformed(evt);
            }
        });

        VariableAEstudiar.setText("Variable a estudiar: ");

        ResultadoCheckBox.setSelected(true);
        ResultadoCheckBox.setText("Resultado Gr√°fico");
        ResultadoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResultadoCheckBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Mejor Resultado:");

        jLabel7.setText("Mejor Media:");

        resultadoText.setEnabled(false);
        resultadoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultadoTextActionPerformed(evt);
            }
        });

        mediaText.setEnabled(false);

        jLabel8.setText("Obtenido con Valor: ");

        jLabel9.setText("Obtenido con Valor:");

        resultadoIntText.setEnabled(false);

        mediaIntText.setEnabled(false);
        mediaIntText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediaIntTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CrossoverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(minCrossoverText, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(minMutationText, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(138, 138, 138)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(PoblacionSizeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(GenerationNumberLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(minGenerationNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(minPopulationSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ResultadoCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                            .addComponent(minElitismoText)
                                            .addComponent(resultadoText)
                                            .addComponent(mediaText))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(maxCrossoverText, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(maxPopulationSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(maxGenerationNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(maxMutationText, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(maxElitismoText, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9))
                                        .addGap(51, 51, 51))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(VariableAEstudiar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(SeleccionadoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultadoIntText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(aumentoMutationText, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(aumentoElitismoText, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(resetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(aumentoPopulationText, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(aumentoGenerationNumberText, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(aumentoCrossoverText, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                    .addComponent(mediaIntText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PoblacionSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minPopulationSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxPopulationSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aumentoPopulationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(GenerationNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(minGenerationNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addComponent(aumentoGenerationNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addComponent(maxGenerationNumberText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aumentoCrossoverText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CrossoverLabel)
                        .addComponent(minCrossoverText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maxCrossoverText)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxMutationText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aumentoMutationText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(minMutationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minElitismoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxElitismoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aumentoElitismoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runButton)
                    .addComponent(ResultadoCheckBox)
                    .addComponent(VariableAEstudiar)
                    .addComponent(SeleccionadoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultadoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(resultadoIntText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(mediaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(mediaIntText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
       
        Double mejorValor = Double.MAX_VALUE;Double numMejorValor=0.0;
        Double mejorMedia = Double.MAX_VALUE;Double numMejorMedia=0.0;
        ResultadosGraficos result = new ResultadosGraficos ();
        switch (SeleccionadoCombo.getSelectedIndex())
        {
            
            case 0:
                
             //  k =  (Double.parseDouble(maxMutationText.getText()) - Double.parseDouble(minMutationText.getText())) / Double.parseDouble(aumentoMutationText.getText());
               
               for (int i = Integer.parseInt(minPopulationSizeText.getText()); i <= Integer.parseInt(maxPopulationSizeText.getText()); i += Integer.parseInt(aumentoPopulationText.getText()) )
               {
                  ResultadosGraficos g =  Main.run(i, 100, 0.60, 0.10, 0.05, "Ruleta", "PMX", "Intercambio", 26);
                  Double valor = g.getBestAbsolut().get(99);
                  Double media = g.getMediaGeneracion().get(99);
                  if(media< mejorMedia)
                  {
                      mejorMedia = media;
                      numMejorMedia = (double)i;
                  }
                  if(valor < mejorValor)
                  {
                      mejorValor =  valor;
                      numMejorValor = (double)i;
                  }
                  result.addValor(mejorValor, valor, media);
               }
                break;
            case 1: 
               for (int i = Integer.parseInt(minGenerationNumberText.getText()); i <= Integer.parseInt(maxGenerationNumberText.getText()); i += Integer.parseInt(aumentoGenerationNumberText.getText()) )
               {
                  ResultadosGraficos g =  Main.run(100, i, 0.60, 0.10, 0.05, "Ruleta", "PMX", "Intercambio", 26);
                  Double valor = g.getBestAbsolut().get(i-1);
                  Double media = g.getMediaGeneracion().get(i-1);
                  if(media< mejorMedia)
                  {
                      mejorMedia = media;
                      numMejorMedia = (double)i;
                  }
                  if(valor < mejorValor)
                  {
                      mejorValor =  valor;
                      numMejorValor = (double)i;
                  }
                  result.addValor(mejorValor, valor, media);
               }
                break;
            case 2:
               for (Double i = Double.parseDouble(minCrossoverText.getText()); i <= Double.parseDouble(maxCrossoverText.getText()); i += Double.parseDouble(aumentoCrossoverText.getText()) )
               {
                  ResultadosGraficos g =  Main.run(100, 100, i, 0.10, 0.05, "Ruleta", "PMX", "Intercambio", 26);
                  Double valor = g.getBestAbsolut().get(99);
                  Double media = g.getMediaGeneracion().get(99);
                  if(media< mejorMedia)
                  {
                      mejorMedia = media;
                      numMejorMedia = (double) i;
                  }
                  if(valor < mejorValor)
                  {
                      mejorValor =  valor;
                      numMejorValor = (double) i;
                  }
                  result.addValor(mejorValor, valor, media);
               }
                break;
            case 3:
               //k =  (Double.parseDouble(maxMutationText.getText()) - Double.parseDouble(minMutationText.getText())) / Double.parseDouble(aumentoMutationText.getText());
               
               for (double i = Double.parseDouble(minMutationText.getText()); i <= Double.parseDouble(maxMutationText.getText()); i += Double.parseDouble(aumentoMutationText.getText()) )
               {
                  ResultadosGraficos g =  Main.run(100, 100, 0.60, i, 0.05, "Ruleta", "PMX", "Intercambio", 26);
                  Double valor = g.getBestAbsolut().get(99);
                  Double media = g.getMediaGeneracion().get(99);
                  if(media< mejorMedia)
                  {
                      mejorMedia = media;
                      numMejorMedia = i;
                  }
                  if(valor < mejorValor)
                  {
                      mejorValor =  valor;
                      numMejorValor = i;
                  }
                  result.addValor(mejorValor, valor, media);
               }
                break;
            case 4:
                for (double i = Double.parseDouble(minMutationText.getText()); i <= Double.parseDouble(maxMutationText.getText()); i += Double.parseDouble(aumentoMutationText.getText()) )
                {
                  ResultadosGraficos g =  Main.run(100, 100, 0.60, 0.10, i, "Ruleta", "PMX", "Intercambio", 26);
                  Double valor = g.getBestAbsolut().get(99);
                  Double media = g.getMediaGeneracion().get(99);
                  if(media< mejorMedia)
                  {
                      mejorMedia = media;
                      numMejorMedia = i;
                  }
                  if(valor < mejorValor)
                  {
                      mejorValor =  valor;
                      numMejorValor = i;
                  }
                  result.addValor(mejorValor, valor, media);
                 }
                break;
        }
        if (ResultadoCheckBox.isSelected())
        { 
            Plot2DPanel plot2DPanel = new Plot2DPanel();
            JFrame jFrame = new JFrame();
            jFrame.dispose(); 
            jFrame=new JFrame();
            plot2DPanel.removeAllPlots();
            plot2DPanel.addLinePlot("Mejor Absoluto", Color.BLUE,ArrayListtoArray(result.getBestAbsolut()));
            plot2DPanel.addLinePlot("Mejor de la Generacion", Color.RED,ArrayListtoArray(result.getBestGeneration()));
            plot2DPanel.addLinePlot("Media Generacional", Color.GREEN,ArrayListtoArray(result.getMediaGeneracion()));
            plot2DPanel.addLegend("SOUTH");
            jFrame.setSize(400, 400);
            jFrame.setContentPane(plot2DPanel);
            jFrame.setVisible(true);
        }
        resultadoText.setText(mejorValor.toString());
        resultadoIntText.setText(numMejorValor.toString());
        mediaText.setText(mejorMedia.toString());
        mediaIntText.setText(numMejorMedia.toString());
        
    }//GEN-LAST:event_runButtonActionPerformed

    private void SeleccionadoComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionadoComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SeleccionadoComboActionPerformed

    private void minPopulationSizeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minPopulationSizeTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minPopulationSizeTextActionPerformed

    private void aumentoCrossoverTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentoCrossoverTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aumentoCrossoverTextActionPerformed

    private void maxCrossoverTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxCrossoverTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxCrossoverTextActionPerformed

    private void ResultadoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResultadoCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResultadoCheckBoxActionPerformed

    private void resultadoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultadoTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resultadoTextActionPerformed

    private void mediaIntTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediaIntTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mediaIntTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiParteOpcional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiParteOpcional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiParteOpcional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiParteOpcional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiParteOpcional().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CrossoverLabel;
    private javax.swing.JLabel GenerationNumberLabel;
    private javax.swing.JLabel PoblacionSizeLabel;
    private javax.swing.JCheckBox ResultadoCheckBox;
    private javax.swing.JComboBox<String> SeleccionadoCombo;
    private javax.swing.JLabel VariableAEstudiar;
    private javax.swing.JTextField aumentoCrossoverText;
    private javax.swing.JTextField aumentoElitismoText;
    private javax.swing.JTextField aumentoGenerationNumberText;
    private javax.swing.JTextField aumentoMutationText;
    private javax.swing.JTextField aumentoPopulationText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField maxCrossoverText;
    private javax.swing.JTextField maxElitismoText;
    private javax.swing.JTextField maxGenerationNumberText;
    private javax.swing.JTextField maxMutationText;
    private javax.swing.JTextField maxPopulationSizeText;
    private javax.swing.JTextField mediaIntText;
    private javax.swing.JTextField mediaText;
    private javax.swing.JTextField minCrossoverText;
    private javax.swing.JTextField minElitismoText;
    private javax.swing.JTextField minGenerationNumberText;
    private javax.swing.JTextField minMutationText;
    private javax.swing.JTextField minPopulationSizeText;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField resultadoIntText;
    private javax.swing.JTextField resultadoText;
    private javax.swing.JButton runButton;
    // End of variables declaration//GEN-END:variables

    public double[] ArrayListtoArray(ArrayList<Double> a)
    {
		double array[] = new double[a.size()];
		for(int i=0;i<a.size();i++)
		{
			array[i]=a.get(i);
		}
		return array;
    }
}
